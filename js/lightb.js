// Generated by CoffeeScript 1.7.1
(function() {
  var Box, Image, ImageList, LightB, Navigation,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Image = (function() {
    function Image(dom, list) {
      var clickHandler, self;
      this.dom = dom;
      this.list = list;
      console.log('Image#constructor');
      self = this;
      clickHandler = function() {
        var ex;
        console.log('Image#constructor#clickHandler');
        try {
          window.LightB.display(this);
        } catch (_error) {
          ex = _error;
          console.log(ex);
        }
        return false;
      };
      console.log('DOM', this.dom);
      this.href = jQuery(this.dom).attr('href');
      jQuery(this.dom).click(clickHandler);
    }

    Image.prototype.href = Image.href;

    Image.prototype.list = Image.list;

    return Image;

  })();

  ImageList = (function(_super) {
    __extends(ImageList, _super);

    function ImageList() {
      var arg, args, self;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      console.log('ImageList#constructor');
      self = this;
      args = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          _results.push(new Image(arg, self));
        }
        return _results;
      })();
      this.push.apply(this, args);
    }

    return ImageList;

  })(Array);

  Navigation = (function() {
    function Navigation() {
      this.reset = __bind(this.reset, this);
      console.log('Navigation#constructor');
      this.dom = jQuery("<nav class='lightb-nav'></nav>");
      this.prevButton = jQuery("<a class='lightb-prev'></a>");
      this.nextButton = jQuery("<a class='lightb-next'></a>");
      jQuery(this.dom).append(this.prevButton).append(this.nextButton);
    }

    Navigation.prototype.reset = function() {
      return console.log('Navigation#reset');
    };

    Navigation.prototype.dom = Navigation.dom;

    return Navigation;

  })();

  Box = (function() {
    function Box() {
      this.display = __bind(this.display, this);
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      console.log('Box#constructor');
      this.dom = jQuery('<div class="lightb-target off"><a class="lightb-close" href="#"></a></div>');
      this.nav = new Navigation;
      jQuery('body').append(this.dom);
      jQuery(this.dom).append(this.nav.dom);
      jQuery(this.dom).on('click', '.lightb-close', this.hide);
    }

    Box.prototype.show = function() {
      console.log('Box#show');
      return jQuery(this.dom).show(0, (function(_this) {
        return function() {
          return jQuery(_this.dom).removeClass('off').addClass('on');
        };
      })(this));
    };

    Box.prototype.hide = function() {
      var handleHide;
      console.log('Box#hide');
      handleHide = (function(_this) {
        return function() {
          console.log('Box#hide#handleHide');
          jQuery(_this.dom).hide();
          return jQuery(_this.dom).find('.lightb-image').remove();
        };
      })(this);
      jQuery(this.dom).removeClass('on').addClass('off');
      return setTimeout(handleHide, 500);
    };

    Box.prototype.display = function(image) {
      var displayNavigation, imageDom;
      console.log('Box#display');
      displayNavigation = function(image, imageDom) {
        console.log('Box#display#displayNavigation');
        return console.log('image', image);
      };
      imageDom = jQuery("<img class='lightb-image' src='" + image.href + "' />");
      jQuery(this.dom).append(imageDom);
      if (image.list) {
        console.log('It is part of a list.');
      } else {
        console.log('It is NOT part of a list.');
      }
      return this.show();
    };

    Box.prototype.next = function() {
      return console.log('Box#next');
    };

    Box.prototype.prev = function() {
      return console.log('Box#prev');
    };

    return Box;

  })();

  LightB = (function() {
    var LightBKeyHandler;

    function LightB() {
      console.log('LightB#constructor');
      this.box = new Box;
      this.initialize();
    }

    LightB.prototype.initialize = function() {
      console.log('LightB#initialize');
      jQuery(document).on('keyup', LightBKeyHandler);
      return jQuery('[data-lightbox]').each(function(i, elem) {
        var images;
        console.log('elem', elem);
        if (jQuery(elem).is('a')) {
          return new Image(elem);
        } else {
          images = jQuery(elem).find('a:has(>img)').toArray();
          return (function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(ImageList, images, function(){});
        }
      });
    };

    LightBKeyHandler = function(e) {
      console.log('LightBKeyHandler');
      if (e.which === 27) {
        return window.LightB.box.hide();
      }
    };

    LightB.prototype.display = function(image) {
      console.log('LightB#display');
      return this.box.display(image);
    };

    return LightB;

  })();

  window.LightB = new LightB;

}).call(this);
